require('dotenv').config();
const { Client, GatewayIntentBits, Events, EmbedBuilder } = require('discord.js');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once(Events.ClientReady, () => {
    console.log(`‚úÖ ${client.user.tag} est en ligne et pr√™t.`);
});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isChatInputCommand()) return;

    try {
        await interaction.deferReply();

        if (interaction.commandName === 'imc') {
            const poids = interaction.options.getNumber('poids');
            const taille = interaction.options.getNumber('taille') / 100;

            if (!poids || !taille) {
                return await interaction.editReply('‚ùå Merci d\'indiquer un poids et une taille valides.');
            }

            const imc = poids / (taille * taille);
            let interpretation = '';
            let conseil = '';

            if (imc < 18.5) {
                interpretation = 'üö© Insuffisance pond√©rale';
                conseil = 'üçΩÔ∏è Augmente tes apports caloriques avec des repas complets.';
            } else if (imc < 25) {
                interpretation = '‚úÖ Corpulence normale';
                conseil = 'üí™ Continue ton hygi√®ne de vie et ton activit√© physique.';
            } else if (imc < 30) {
                interpretation = '‚ö†Ô∏è Surpoids';
                conseil = 'üèÉ‚Äç‚ôÇÔ∏è Augmente ton activit√© physique et surveille ton alimentation.';
            } else if (imc < 35) {
                interpretation = '‚ö†Ô∏è Ob√©sit√© mod√©r√©e';
                conseil = 'üçè Mets en place un suivi alimentaire et consulte si besoin un professionnel.';
            } else {
                interpretation = 'üö® Ob√©sit√© s√©v√®re';
                conseil = 'üìû Consulte rapidement un professionnel de sant√© pour un accompagnement.';
            }

            const embed = new EmbedBuilder()
                .setColor(0x00bfa5)
                .setTitle('ü©∫ R√©sultat de ton IMC')
                .addFields(
                    { name: 'üìä IMC', value: imc.toFixed(1), inline: true },
                    { name: 'ü©ª Interpr√©tation', value: interpretation, inline: true },
                    { name: 'üí° Conseil', value: conseil },
                    { name: 'üìå Formule', value: 'Poids (kg) √∑ Taille (m)¬≤' }
                )
                .setFooter({ text: 'HealthyBot ‚Ä¢ Calcul direct dans Discord' });

            await interaction.editReply({ embeds: [embed] });
        }

        if (interaction.commandName === 'metabase') {
            const poids = interaction.options.getNumber('poids');
            const taille = interaction.options.getNumber('taille');
            const age = interaction.options.getNumber('age');
            const sexe = interaction.options.getString('sexe');
            const activite = parseFloat(interaction.options.getString('activite'));

            if (!poids || !taille || !age || !sexe || isNaN(activite)) {
                return await interaction.editReply('‚ùå Merci de fournir toutes les informations demand√©es.');
            }

            let mb;
            if (sexe === 'homme') {
                mb = 10 * poids + 6.25 * taille - 5 * age + 5;
            } else if (sexe === 'femme') {
                mb = 10 * poids + 6.25 * taille - 5 * age - 161;
            } else {
                return await interaction.editReply('‚ùå Erreur : sexe invalide.');
            }

            const tdee = mb * activite;

            const metaEmbed = new EmbedBuilder()
                .setColor(0x00ff87)
                .setTitle('üî• R√©sultat de ton M√©tabolisme de Base')
                .addFields(
                    { name: 'üõå MB (au repos)', value: `${Math.round(mb)} kcal/jour`, inline: true },
                    { name: 'üèÉ‚Äç‚ôÇÔ∏è TDEE (activit√© incluse)', value: `${Math.round(tdee)} kcal/jour`, inline: true },
                    { name: 'üìå Formule utilis√©e', value: 'Harris-Benedict : 10 √ó poids + 6.25 √ó taille - 5 √ó √¢ge + 5 (homme) ou -161 (femme), multipli√© par le facteur d\'activit√©' }
                )
                .setFooter({ text: 'HealthyBot ‚Ä¢ Calcul direct dans Discord' });

            await interaction.editReply({ embeds: [metaEmbed] });
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du traitement de l\'interaction :', error);
    }
});


process.on('unhandledRejection', console.error);
process.on('uncaughtException', console.error);

client.login(process.env.TOKEN);


