// üìÇ commands/objectif.js

const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('objectif')
        .setDescription('D√©finis ton objectif : perte de poids, prise de masse, maintien.')
        .addStringOption(option =>
            option.setName('objectif')
                .setDescription('Ton objectif actuel.')
                .setRequired(true)
                .addChoices(
                    { name: 'Perte de poids', value: 'perte de poids' },
                    { name: 'Prise de masse', value: 'prise de masse' },
                    { name: 'Maintien', value: 'maintien' }
                )),
    async execute(interaction) {
        try {
            console.log('‚úÖ Commande /objectif re√ßue.');

            await interaction.deferReply();

            const obj = interaction.options.getString('objectif');

            const objectifEmbed = new EmbedBuilder()
                .setColor('#36D6B5')
                .setTitle('üéØ Objectif enregistr√©')
                .setDescription(`Ton objectif **${obj}** a √©t√© enregistr√© avec succ√®s.`)
                .setFooter({ text: 'Healthy&Co ‚Ä¢ Suivi personnalis√©' })
                .setTimestamp();

            await interaction.editReply({ embeds: [objectifEmbed] });

            console.log(`‚úÖ Objectif enregistr√© : ${obj}`);
        } catch (error) {
            console.error('‚ùå Erreur dans la commande /objectif :', error);
            if (interaction.deferred || interaction.replied) {
                await interaction.followUp({ content: '‚ùå Une erreur est survenue lors de l\'enregistrement de ton objectif.', ephemeral: true });
            } else {
                await interaction.reply({ content: '‚ùå Une erreur est survenue lors de l\'enregistrement de ton objectif.', ephemeral: true });
            }
        }
    },
};
